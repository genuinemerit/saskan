import bpy
import bmesh
import math

"""Press Shift-F11 in Blender to open a text file,
...   or use the little popup menu to far left of the 2nd
...   row Blender menu bar. It jumps to all the different
...   modes that blender works in. Note that it includes a
...   Python console. Maybe try running this code there?
... There is a run button on the top dock.
... This script (generated by ChatGPT) failed on first attempt.
... Blender saves file as .blend
... The blender text editor has a Templates menu with 2 options:
...     - Python
...     - OSL (Open Shading Language)

Press Shift-F11 in Blender to open a text file
or use the little popup menu to far left of the 2nd
row Blender menu bar. It jumps to all the different
modes that blender works in. Note that it includes a
Python console. Maybe try running this code there?

There is a run button on the top dock,
This script (generated by ChatGPT) failed on first attempt.
Blender saves file as .blend
The blender text editor has a Templates menu with 2 options:
- Python
- OSL (Open Shading Language)\n'

Tried running this code in Python console. Got lots of errors,
most of them stating "context is incorrect".

Probably better to work thru examples from a book or tutorial.
But the thing to note, really, is that it IS possible to do visualization
in Blender using python code.
"""


# Clear existing mesh objects
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.object.select_by_type(type='MESH')
bpy.ops.object.delete()

# Create a new sphere
bpy.ops.mesh.primitive_uv_sphere_add(radius=1, location=(0, 0, 0))

# Get a reference to the sphere object
sphere = bpy.context.object
bpy.context.view_layer.objects.active = sphere

# Create a new BMesh
bm = bmesh.new()

# Define the number of internal points
num_points = 100

# Add internal points to the sphere
for i in range(num_points):
    theta = 2 * math.pi * i / num_points
    phi = math.pi / 2

    x = math.cos(theta) * math.sin(phi)
    y = math.sin(theta) * math.sin(phi)
    z = math.cos(phi)

    bm.verts.new((x, y, z))

# Update the BMesh
bm.to_mesh(sphere.data)
bm.free()
